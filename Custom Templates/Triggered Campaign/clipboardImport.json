{
    "description": "Triggered Campaign",
    "public": false,
    "files": {
        "template.hbs": {
            "content": ""
        },
        "template.css": {
            "content": ""
        },
        "template.js": {
            "content": ""
        },
        "template.ts": {
            "content": "import { RecommendationsConfig, RecipeReferenceLookup, RecipeReference, recommendIdsOnly } from 'recs';\nimport { UserAttributeLookup, UserAttributeReference, UserSegmentLookup, UserSegmentReference } from 'common';\n\nexport class TriggerUtils {\n    static DEFAULT_CATALOG_OBJECT = 'Product';\n    static DEFAULT_CATALOG_OBJECT_ATTRIBUTES = ['id', 'name', 'imageUrl', 'url', 'price', 'listPrice', 'brand', 'categoryName'];\n\n    static getFlatItems(context: CampaignComponentContext, ids: string[]): any[] {\n        return context.services.catalog\n            .findItems(TriggerUtils.DEFAULT_CATALOG_OBJECT, ids)\n            .map((item) => item.toFlatJSON(\n                TriggerUtils.DEFAULT_CATALOG_OBJECT_ATTRIBUTES\n            ));\n    }\n\n    static getUserAttributeValue(attributeId: string, user: User) {\n        return (user?.attributes?.[attributeId] as Attribute | undefined)?.value?.toString() || '';\n    }\n\n    static getUserSegments(segments: UserSegmentReference[], user: User) {\n        if (segments?.length && user?.segmentMembership?.length) {\n            const selectedSegments: string[] = segments.map((segment) => segment.id);\n            return user.segmentMembership\n                .filter((memberSegment) => selectedSegments.includes(memberSegment.segmentId))\n                .map((memberSegment) => memberSegment.segmentName).join(',');\n        }\n        return '';\n    }\n\n    static getRecommendations(recipe: RecipeReference, context: CampaignComponentContext, maxRecommendations: number) {\n        let result: any[] = [];\n\n        if (recipe) {\n            const recipeConfig = new RecommendationsConfig();\n            recipeConfig.maxResults = maxRecommendations;\n            recipeConfig.recipe = recipe;\n            if (recipeConfig?.recipe?.id) {\n                const recs = recommendIdsOnly(context, recipeConfig);\n                result = TriggerUtils.getFlatItems(context, recs);\n            }\n        }\n\n        try {\n            return JSON.stringify(result);\n        } catch (error) {\n            return '[]'\n        }\n    }\n\n    static getTriggerContext(context: CampaignComponentContext): any {\n        const result = {};\n\n        if (context.trigger?.type) {\n            result['Trigger_Type'] = context.trigger.type;\n            let trigger;\n            switch (context.trigger.type) {\n                case 'SegmentLeave':\n                case 'SegmentJoin':\n                    trigger = context.trigger as SegmentTrigger;\n                    result['Trigger_Segment'] = trigger.segmentName;\n                    break;\n                case 'EventAction':\n                    trigger = context.trigger as ActionTrigger;\n                    result['Trigger_Action'] = trigger.action;\n                    break;\n                default:\n                    trigger = context.trigger as CatalogTrigger;\n                    const items: any[] = [];\n\n                    if (trigger.itemIdsByType) {\n                        Object.keys(trigger.itemIdsByType).forEach((catalogObject) => {\n                            items.push(...TriggerUtils.getFlatItems(\n                                context, catalogObject, trigger.itemIdsByType[catalogObject]\n                            ));\n                        });\n                    }\n\n                    try {\n                        result['Trigger_Catalog_Items'] = JSON.stringify(items);\n                    } catch (error) { }\n                    break;\n            }\n        }\n\n        return result;\n    }\n}\n\nexport class TriggerPayload {\n    @title('User Attributes')\n    @subtitle(`Selected Attributes require matching fields in the Data Extension.`)\n    @lookupOptions(() => new UserAttributeLookup())\n    attributes: UserAttributeReference[] = [{\n        \"id\": \"emailAddress\",\n        \"label\": \"emailAddress (Email Address)\",\n        \"type\": \"String\"\n    }];\n\n    @title('Main Recommendation')\n    @lookupOptions(() => new RecipeReferenceLookup(TriggerUtils.DEFAULT_CATALOG_OBJECT))\n    recipe: RecipeReference;\n\n    @shownIf(this, (self) => self.ShowRecommendationCountConfig)\n    @title(' ')\n    @subtitle(\"Control the maximum number of returned recommendations\")\n    returnedRecommendationsLimit: 1 | 2 | 3 | 4 | 5 | 6 = 6;\n\n    @title('Include Additional Recommendations')\n    includeAdditionalRecommendations: boolean = false;\n\n    @title('Optional Additional Recommendation')\n    @shownIf(this, (self) => self.includeAdditionalRecommendations)\n    @lookupOptions(() => new RecipeReferenceLookup(TriggerUtils.DEFAULT_CATALOG_OBJECT))\n    additionalRecipe: RecipeReference;\n\n    @shownIf(this, (self) => self.ShowRecommendationCountConfig && self.includeAdditionalRecommendations)\n    @title(' ')\n    @subtitle(\"Control the maximum number of returned additional recommendations\")\n    returnedAdditionalRecommendationsLimit: 1 | 2 | 3 | 4 | 5 | 6 = 6;\n\n    @title('Include User Segments')\n    @subtitle(`Select only few critical segments.`)\n    includeSegments: boolean = false;\n\n    @title(' ')\n    @shownIf(this, (self) => self.includeSegments)\n    @lookupOptions(() => new UserSegmentLookup())\n    segments: UserSegmentReference[];\n\n    @optional(true)\n    @title('Show Recommendation Count Config')\n    ShowRecommendationCountConfig: boolean = false;\n\n    // Example custom field that can be added to the template\n    // @title('Custom string to pass')\n    // customFieldText: DateTime;\n\n    getPayload(context: CampaignComponentContext) {\n        const triggerContext = TriggerUtils.getTriggerContext(context);\n\n        const result = {\n            'Campaign': context.campaignId,\n            'Experience': context.experienceId,\n            ...triggerContext\n        };\n\n        this.attributes.forEach((attr) => {\n            result[attr.id] = TriggerUtils.getUserAttributeValue(attr.id, context.user);\n        });\n\n        result['Recommendations'] = TriggerUtils.getRecommendations(this.recipe, context, this.returnedRecommendationsLimit);\n\n        if (this.includeAdditionalRecommendations) {\n            result['Additional_Recommendations'] =\n                TriggerUtils.getRecommendations(this.additionalRecipe, context, this.returnedAdditionalRecommendationsLimit);\n        }\n\n        if (this.includeSegments) {\n            result['Segments'] = TriggerUtils.getUserSegments(this.segments, context.user);\n        }\n\n        // Example custom field handler - the name passed to result Array must be created as a field in Data Extension\n        // if (this.customFieldDate) {\n        //     result['CustomFieldDate'] = this.customFieldDate.dateTime[0];\n        // }\n\n        return result;\n    }\n}\n\nexport class TriggerTemplate implements CampaignTemplateComponent {\n\n    @title(' ')\n    templateConfig: TriggerPayload = new TriggerPayload();\n\n    run(context: CampaignComponentContext) {\n        return this.templateConfig.getPayload(context);\n    }\n}"
        }
    }
}