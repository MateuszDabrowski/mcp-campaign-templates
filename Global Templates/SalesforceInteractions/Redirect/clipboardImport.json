{
    "description": "Redirect",
    "public": false,
    "files": {
        "template.hbs": {
            "content": "{{!--\n    Global Template: Redirect\n\n    This global template redirects the target webpage to another wepage, based on the URLs provided for each.\n\n    Requirements:\n    1) At least one available content zone with a selector of \"body\".\n\n    Notes:\n    1) This template is set up in such a way that it will not redirect while in the template editor.\n    2) By default, query parameters are stripped from both the target page and redirect URLs provided,\n    via Serverside Code.\n    3) TODO: add more notes!\n--}}\n"
        },
        "template.css": {
            "content": "/* Left intentionally blank. CSS is not needed for this template. */\n"
        },
        "template.js": {
            "content": "(function() {\n\n    /**\n     * @function isEditorFramePresent\n     * @returns {boolean}\n     * @description Return true when IS Launcher element is present\n     */\n    function isEditorFramePresent() {\n        return (window.frameElement || {}).id === \"siteEditorFrame\";\n    }\n\n    /**\n     * @function shouldPreventRedirect\n     * @param {Object} context\n     * @returns {boolean}\n     * @description Return true if the execution of the redirect should be prevented\n     */\n    function shouldPreventRedirect(context) {\n        const currentPage = window.location.hostname + window.location.pathname.replace(/\\/$/, \"\");\n        const targetPage = context.targetPageUrl.replace(/http(s)?\\:\\/\\//, \"\");\n        const redirectPage = context.redirectUrl.replace(/http(s)?\\:\\/\\//, \"\");\n        return (targetPage && redirectPage) && (currentPage === redirectPage || currentPage !== targetPage);\n    }\n\n    /**\n     * @function runTemplateExperience\n     * @param {Object} context\n     * @returns {Promise}\n     * @description Return early if user is in the \"Control\" group. Otherwise, send impression stat and\n     * carry out the redirect.\n     */\n     function runTemplateExperience(context) {\n        if (context.userGroup === \"Control\") {\n            return;\n        }\n\n        return new Promise((resolve) => {\n            SalesforceInteractions.cashDom(\"body\").css(\"visibility\", \"hidden\");\n\n            SalesforceInteractions.mcis.sendStat({\n                campaignStats: [{\n                    control: context.userGroup === \"Control\",\n                    experienceId: context.experience,\n                    stat: \"Impression\"\n                }]\n            });\n\n            context.paramsForRedirect = (context.maintainQueryParams && window.location.href.match(/\\?.*/))\n                ? window.location.href.match(/\\?.*/)[0]\n                : \"\";\n\n            window.location.href = context.redirectUrl + context.paramsForRedirect;\n        });\n    }\n\n    function apply(context, template) {\n\n        /** Prevent redirect from occurring while in either the Template Editor or Campaign Editor. */\n        if (isEditorFramePresent()) {\n            return;\n        }\n\n        if (shouldPreventRedirect(context)) {\n            return new Promise((resolve) => false && resolve());\n        }\n\n        return runTemplateExperience(context);\n    }\n\n    function reset(context, template) {\n        // Purposefully left empty\n    }\n\n    function control(context) {\n        if (isEditorFramePresent()) {\n            return;\n        }\n\n        if (shouldPreventRedirect(context)) {\n            return new Promise((resolve) => false && resolve());\n        }\n\n        return runTemplateExperience(context);\n    }\n\n    registerTemplate({\n        apply: apply,\n        reset: reset,\n        control: control\n    });\n\n})();\n"
        },
        "template.ts": {
            "content": "export class RedirectTemplate implements CampaignTemplateComponent {\n\n    @title(\"Target Page\")\n    @subtitle(\"Requires full URL string including https://, and operates on exact match criteria\")\n    targetPageUrl: string;\n\n    @title(\"URL for Redirect\")\n    @subtitle(\"New destination. Requires full URL string including https://\")\n    redirectUrl: string;\n\n    @title(\"Redirect with query parameters from original URL\")\n    maintainQueryParams: boolean = true;\n\n    private stripParams(url: string): string {\n        return url.replace(/(\\/)?(\\?.*)?$/, \"\");\n    }\n\n    run(context: CampaignComponentContext) {\n        return {\n            targetPageUrl: this.stripParams(this.targetPageUrl),\n            redirectUrl: this.stripParams(this.redirectUrl)\n        };\n    }\n\n}\n"
        }
    }
}