{
    "description": "Einstein Content Recommendations",
    "public": false,
    "files": {
        "template.hbs": {
            "content": "{{!--\n    Global Template: Einstein Content Recommendations\n\n    This global template inserts recommended content in a two-column format, based on a selected Einstein Recipe.\n\n    Requirements:\n    1) Set the content zone(s) to that defined in your Sitemap.\n\n    Customizations:\n    1) Item type to promote can be changed in Serverside Code (see 'recsConfig').\n    2) For performance optimization, add an observer selector as a second argument to\n    Evergage.DisplayUtils.pageElementLoaded in Clientside Code that waits for the content zone to load into the DOM.\n    3) Use .before(html) or .after(html) in Clientside Code to insert the generated HTML content before or after the\n    content zone, respectively, instead of replacing the content of the content zone with .html(html).\n    4) To support rich text, add the @richText(true) decorator to configuration properties in Serverside Code.\n    Handlebars expressions for these properties must be wrapped in three sets of curly braces (e.g. {{{expression}}} ).\n    5) Remove or change the default values for the configuration properties in Serverside Code.\n    6) Change the value of the aria-label attribute as necessary.\n    7) Media query breakpoints can be changed in CSS.\n--}}\n\n<section class=\"evg-einstein-content-recs\" data-evg-campaign-id=\"{{campaign}}\" data-evg-experience-id=\"{{experience}}\"\ndata-evg-user-group=\"{{userGroup}}\" aria-label=\"Content Recommendations{{#if header}} - {{header}}{{/if}}\">\n    {{#if header}}\n    <h3 class=\"evg-header evg-h3\">\n        {{~header~}}\n    </h3>\n    {{/if}}\n    <div class=\"evg-content-recs\">\n        {{~#each blogs}}\n        <div class=\"evg-container\">\n            <article class=\"evg-content-rec\" data-evg-item-id=\"{{id}}\" data-evg-item-type=\"{{../itemType}}\">\n                <a href=\"{{attributes.url.value}}\">\n                    <img class=\"evg-content-img\" src=\"{{attributes.imageUrl.value}}\" alt=\"{{attributes.name.value}}\"/>\n                </a>\n                <div class=\"evg-content-details\">\n                    {{#if ../nameVisibility}}\n                    <a class=\"evg-content-title\" href=\"{{attributes.url.value}}\">\n                        {{~attributes.name.value~}}\n                    </a>\n                    {{/if}}\n                    {{#if ../descriptionVisibility}}\n                        {{#if attributes.description.value}}\n                        <div class=\"evg-content-description\">\n                            {{~attributes.description.value~}}\n                        </div>\n                        {{/if}}\n                    {{/if}}\n                </div>\n            </article>\n        </div>\n        {{/each~}}\n    </div>\n</section>\n"
        },
        "template.css": {
            "content": "/* ==========================================================================\n   Recommendations Block\n========================================================================== */\n\n.evg-einstein-content-recs {\n    width: 100%;\n    padding: 1em 0;\n    color: inherit;\n    font-family: inherit;\n}\n\n.evg-einstein-content-recs .evg-content-recs {\n    position: relative;\n    z-index: 2;\n\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n    -ms-flex-flow: row wrap;\n    flex-flow: row wrap;\n\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n\n    -webkit-box-align: start;\n    -ms-flex-align: start;\n    align-items: flex-start;\n\n    width: auto;\n    max-width: 960px;\n    margin: 0 auto;\n}\n\n.evg-einstein-content-recs .evg-container {\n    width: 50%;\n}\n\n/* ==========================================================================\n   Headers\n========================================================================== */\n\n.evg-einstein-content-recs .evg-h3 {\n    margin: 0 0 .5rem;\n    padding: 0;\n    color: inherit;\n    font-size: 1.75rem;\n    font-weight: 500;\n    font-family: inherit;\n    line-height: 1.2;\n}\n\n.evg-einstein-content-recs .evg-header {\n    width: 100%;\n    margin: 1rem 0 2rem;\n    text-align: center;\n}\n\n/* ==========================================================================\n   Individual Content Recommendation\n========================================================================== */\n\n.evg-einstein-content-recs .evg-content-rec {\n    margin: 1.5rem;\n}\n\n.evg-einstein-content-recs .evg-content-img {\n    display: block;\n    width: 100%;\n    height: auto;\n    margin: 0;\n}\n\n.evg-einstein-content-recs .evg-content-details {\n    overflow: hidden;\n    width: 100%;\n    padding: 1rem;\n    background-color: #fff;\n    text-align: left;\n}\n\n.evg-einstein-content-recs .evg-content-title {\n    display: block;\n    overflow: hidden;\n    height: 2.5rem;\n    margin: 0 auto .75rem auto;\n    font-size: 1.5rem;\n    font-weight: 600;\n    line-height: 2.5rem;\n    text-decoration: none;\n}\n\n.evg-einstein-content-recs .evg-content-description {\n    overflow: hidden;\n    height: 8rem;\n    font-size: 1.25rem;\n    line-height: 2rem;\n}\n\n/* ==========================================================================\n   Media Queries\n========================================================================== */\n\n@media screen and (max-width: 575px) {\n    .evg-einstein-content-recs .evg-content-title {\n        font-size: 1.25rem;\n    }\n\n    .evg-einstein-content-recs .evg-content-description {\n        font-size: 1rem;\n    }\n\n    .evg-einstein-content-recs .evg-h3 {\n        margin: 0 0 .5rem;\n        padding: 0;\n        color: inherit;\n        font-size: 1.5rem;\n        font-weight: 500;\n        font-family: inherit;\n        line-height: 1.2;\n    }\n}\n"
        },
        "template.js": {
            "content": "(function() {\n\n    /**\n     * @function buildBindId\n     * @param {Object} context\n     * @description Create unique bind ID based on the campaign and experience IDs.\n     */\n    function buildBindId(context) {\n        return `${context.campaign}:${context.experience}`;\n    }\n\n    function apply(context, template) {\n        const contentZoneSelector = SalesforceInteractions.mcis.getContentZoneSelector(context.contentZone);\n\n        /**\n         * The pageElementLoaded method waits for the content zone to load into the DOM\n         * before rendering the template. The observer element that monitors for the content\n         * zone element to get inserted into its DOM node is set to \"body\" by default.\n         * For performance optimization, this default can be overridden by adding\n         * a second selector argument, which will be used as the observer element instead.\n         *\n         * Visit the Template Display Utilities documentation to learn more:\n         * https://developer.salesforce.com/docs/marketing/personalization/guide/web-template-display-utilities\n         */\n        return SalesforceInteractions.DisplayUtils\n            .bind(buildBindId(context))\n            .pageElementLoaded(contentZoneSelector)\n            .then((element) => {\n                const html = template(context);\n                SalesforceInteractions.cashDom(element).html(html);\n            });\n    }\n\n    function reset(context, template) {\n        SalesforceInteractions.DisplayUtils.unbind(buildBindId(context));\n        SalesforceInteractions.cashDom(`[data-evg-campaign-id=\"${context.campaign}\"][data-evg-experience-id=\"${context.experience}\"]`)\n            .remove();\n    }\n\n    function control(context) {\n        const contentZoneSelector = SalesforceInteractions.mcis.getContentZoneSelector(context.contentZone);\n        return SalesforceInteractions.DisplayUtils\n            .bind(buildBindId(context))\n            .pageElementLoaded(contentZoneSelector)\n            .then((element) => {\n                SalesforceInteractions.cashDom(element).attr({\n                    \"data-evg-campaign-id\": context.campaign,\n                    \"data-evg-experience-id\": context.experience,\n                    \"data-evg-user-group\": context.userGroup\n                });\n            });\n    }\n\n    registerTemplate({\n        apply: apply,\n        reset: reset,\n        control: control\n    });\n\n})();\n"
        },
        "template.ts": {
            "content": "import { RecommendationsConfig, recommend } from \"recs\";\n\nexport class EinsteinContentRecsTemplate implements CampaignTemplateComponent {\n\n    /**\n     * Developer Controls\n     */\n\n    @hidden(true)\n    maximumNumberOfItems: 2 | 4 | 6 = 4;\n\n    /**\n     * Business-User Controls\n     */\n\n    @title(\"Recommendations Block Title\")\n    header: string = \"Title Text\";\n\n    @title(\" \")\n    recsConfig: RecommendationsConfig = new RecommendationsConfig()\n        .restrictItemType(\"Blog\")\n        .restrictMaxResults(this.maximumNumberOfItems);\n\n    @header('Recommendation Display Options')\n\n    @title(\"Show content name\")\n    nameVisibility: boolean = true;\n\n    @title(\"Show content description\")\n    descriptionVisibility: boolean = true;\n\n    run(context:CampaignComponentContext) {\n        this.recsConfig.maxResults = this.maximumNumberOfItems;\n\n        return {\n            itemType: this.recsConfig.itemType,\n            blogs: recommend(context, this.recsConfig)\n        }\n    }\n\n}\n"
        }
    }
}