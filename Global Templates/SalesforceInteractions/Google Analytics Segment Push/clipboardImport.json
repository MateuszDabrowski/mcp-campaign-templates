{
    "description": "Google Analytics Segment Push",
    "public": false,
    "files": {
        "template.hbs": {
            "content": "{{!--\n    Global Template: Google Analytics Segment Push\n\n    This global template lets you push one or more segments to the specified Google Analytics dimensions.\n    Any and all segments that match user membership will be set to the Google Analytics dimension provided.\n    When a user matches more than one segment, the segment names will be concatenated into one pipe (|)\n    delimited string (e.g. \"Segment 1|Segment 2|Segment 3\").\n\n    Note that the template is built to work with the analytics.js tag (https://developers.google.com/analytics/devguides/collection/analyticsjs).\n    If you are using a different tag from Google Analytics, then you will likely need to make adjustments\n    to the Clientside Code.\n\n    Requirements:\n    1) Ensure that the desired segments are available in the dataset.\n\n    Customizations:\n    1) Reconfigure the Google Analytics send method in Clientside Code as necessary.\n    2) Change the delimiter character from pipe (\"|\") to whatever is needed in Clientside Code.\n--}}\n\n<!-- HTML is not needed for this template -->\n"
        },
        "template.css": {
            "content": "/* Left intentionally blank. CSS is not needed for this template. */"
        },
        "template.js": {
            "content": "(function () {\n\n    /**\n     * @function setGaDimension\n     * @param {Object} context\n     * @description Set one or more segments, for which users are members of, to each dimension.\n     * The segment names will be concatenated into one pipe (|) delimited string (e.g. \"Segment 1|Segment 2|Segment 3\")\n     * when more than one segment per dimension are assigned.\n     */\n    function setGaDimension(context) {\n        const gaMapping = context.gaMapping;\n        for (const dimension in gaMapping) {\n            const matchedSegments = gaMapping[dimension].join(\"|\");\n            window.ga('set', dimension, matchedSegments);\n        }\n    }\n\n    /**\n     * @function sendGaDimensions\n     * @param {Object} context\n     * @description Send an event to Google Analytics with segments.\n     */\n    function sendGaDimensions(context) {\n        window.ga(\"send\", {\n            hitType: \"event\",\n            eventCategory: \"Evergage\",\n            eventAction: \"Set Segments\",\n            nonInteraction: true\n        });\n    }\n\n    function apply(context, template) {\n        if (window.ga && typeof window.ga === \"function\") {\n            setGaDimension(context);\n            sendGaDimensions(context);\n            SalesforceInteractions.mcis.sendStat({\n                campaignStats: [\n                    {\n                        control: false,\n                        experienceId: context.experience,\n                        stat: \"Impression\"\n                    }\n                ]\n            });\n        }\n    }\n\n    function reset(context, template) {\n\n    }\n\n    function control() {\n\n    }\n\n    registerTemplate({\n        apply: apply,\n        reset: reset,\n        control: control\n    });\n\n})();\n"
        },
        "template.ts": {
            "content": "import { UserSegmentLookup, UserSegmentReference } from \"common\";\n\nexport class GAConfig {\n    @title(\"Google Analytics Dimension\")\n    @subtitle(\"e.g. dimension27\")\n    gaDimension: string;\n\n    @title(\"Associated IS Segment(s)\")\n    @subtitle(\"Select one or more segments to associate to the above GA dimension.\")\n    @lookupOptions(() => new UserSegmentLookup())\n    segments: UserSegmentReference[]\n}\n\nexport class GASegmentPushTemplate implements CampaignTemplateComponent {\n\n    @title(\"Map IS Segment(s) to Google Analytics\")\n    tabularComplexField: GAConfig[];\n\n    run(context: CampaignComponentContext) {\n\n        let gaMapping = {};\n        this.tabularComplexField.forEach(mapping => {\n            if (('gaDimension' in mapping) && ('segments' in mapping)) {\n                const segments = [];\n                mapping.segments.forEach(segment => {\n                    const segmentJoinDate = context.user.getSegmentJoinDate(segment.id);\n                    if (segmentJoinDate) {\n                        segments.push(segment.label);\n                    }\n                })\n                if (mapping['gaDimension'] && segments.length) {\n                    gaMapping[mapping.gaDimension] = segments;\n                }\n            }\n        })\n\n        return {\n            gaMapping: gaMapping\n        };\n    }\n}"
        }
    }
}