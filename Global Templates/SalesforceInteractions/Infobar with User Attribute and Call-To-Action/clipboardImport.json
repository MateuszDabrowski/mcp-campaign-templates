{
    "description": "Infobar With User Attribute and Call-To-Action",
    "public": false,
    "files": {
        "template.hbs": {
            "content": "{{!--\n    Global Template: Infobar with User Attribute and Call-to-Action\n\n    This global template places an infobar containing text, which includes a user attribute, and a call-to-action button.\n\n    There are two default Styles: Dark text for lighter backgrounds or light text on darker backgrounds.\n\n    Requirements:\n    1) Set the content zone(s) to that defined in your Sitemap. This template assumes a top infobar with the\n    name \"global_infobar_top_of_page\" in Clientside Code for dynamic positioning of the infobar.\n    2) Unless you want the 'userAttrDefault' value to render in place of the 'firstName' attribute, then a user attribute\n    with the name 'firstName' will need to be created. Additionally, 'userAttrDefault' will function as a fallback, in\n    the event that a given user seeing a Campaign using this Template does not have a value for the 'firstName' attribute.\n\n    Customizations:\n    1) As a best practice, set the content zone to \"global_infobar_top_of_page\" for top infobar and\n    \"global_infobar_bottom_of_page\" for bottom infobar.\n    See https://developer.salesforce.com/docs/marketing/personalization/guide/content-zones for recommended names for content zones\n    mapped via the Sitemap.\n    2) To reference a different user attribute, change the references of 'firstName' to\n    the name of the new attribute. More on user attributes here:\n    https://help.salesforce.com/s/articleView?id=sf.mc_pers_profile_attribute_update\n    3) Style options can be changed in Serverside Code.\n    4) Styling of the Style options can be changed in CSS.\n    5) To support rich text, add the @richText(true) decorator to configuration properties in Serverside Code.\n    Handlebars expressions for these properties must be wrapped in three sets of curly braces (e.g. {{{expression}}} ).\n    6) Remove or change the default values for the configuration properties in Serverside Code.\n    7) Change the value of the aria-label attributes as necessary.\n--}}\n\n<div class=\"{{infobarClass}} {{style.className}}\" id=\"evg-infobar-with-user-attr\" data-evg-campaign-id=\"{{campaign}}\"\ndata-evg-experience-id=\"{{experience}}\" data-evg-user-group=\"{{userGroup}}\"\naria-label=\"Infobar{{#if messageText}} - {{messageText}}{{/if}}\" role=\"alert\">\n    <div class=\"evg-infobar\">\n        <p class=\"evg-message {{style.className}}\">\n            {{~messageText~}}\n        </p>\n        {{#unless ctaVisibility}}\n        <a class=\"evg-cta {{style.className}}\" href=\"{{ctaUrl}}\">\n            {{~ctaText~}}\n        </a>\n        {{/unless}}\n    </div>\n    <button class=\"evg-btn-dismissal {{style.className}}\" data-evg-dismissal aria-label=\"Close Infobar\">&times;</button>\n</div>\n"
        },
        "template.css": {
            "content": "/* ==========================================================================\n   Infobar with User Attribute\n========================================================================== */\n\n#evg-infobar-with-user-attr {\n    position: fixed;\n    z-index: 100000;\n    left: 0;\n\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n    -ms-flex-flow: row nowrap;\n    flex-flow: row nowrap;\n\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center;\n\n    box-sizing: border-box;\n    width: 100%;\n    height: 2.5rem;\n    text-align: center;\n}\n\n#evg-infobar-with-user-attr .evg-message {\n    display: inline-block;\n    vertical-align: middle;\n    margin-bottom: 0;\n    font-size: 1rem;\n    font-weight: 400;\n    line-height: 1;\n}\n\n#evg-infobar-with-user-attr .evg-infobar {\n    display: inline;\n}\n\n#evg-infobar-with-user-attr .evg-btn-dismissal {\n    position: absolute;\n    top: 0;\n    right: 0;\n    padding: 0 .5rem;\n    border: 1px solid transparent;\n    background-color: transparent;\n    font-size: 2rem;\n    font-weight: 700;\n    line-height: 1;\n    cursor: pointer;\n}\n\n/* ==========================================================================\n   Infobar Position\n========================================================================== */\n\n#evg-infobar-with-user-attr.evg-infobar-top {\n    top: 0;\n}\n\n#evg-infobar-with-user-attr.evg-infobar-bottom {\n    bottom: 0;\n}\n\n/* ==========================================================================\n   Call-To-Action Link\n========================================================================== */\n\n#evg-infobar-with-user-attr .evg-cta {\n    display: inline-block;\n    vertical-align: middle;\n    margin-left: 10px;\n    font-size: 1rem;\n}\n\n/* ==========================================================================\n   Style\n========================================================================== */\n\n#evg-infobar-with-user-attr.evg-light-on-dark {\n    color: #fff;\n    background-color: #343a40;\n}\n\n#evg-infobar-with-user-attr.evg-dark-on-light {\n    color: #343a40;\n    background-color: #f8f8f8;\n}\n\n#evg-infobar-with-user-attr .evg-cta.evg-light-on-dark {\n    color: #6dccee;\n}\n\n#evg-infobar-with-user-attr .evg-cta.evg-dark-on-light {\n    color: #17a2b8;\n}\n\n#evg-infobar-with-user-attr .evg-btn-dismissal.evg-light-on-dark {\n    color: #fff;\n}\n\n#evg-infobar-with-user-attr .evg-btn-dismissal.evg-dark-on-light {\n    color: #343a40;\n}\n"
        },
        "template.js": {
            "content": "(function() {\n\n    /**\n     * @function setInfobarPosition\n     * @param {Object} context\n     * @description Sets the position of the infobar via class assignments, based on content zone selected.\n     */\n    function setInfobarPosition(context) {\n        if (context.infobarClass === \"evg-infobar-top\") {\n            SalesforceInteractions.cashDom(\"body\").css({ \"margin-bottom\": \"0\", \"margin-top\": \"2.5rem\" });\n        } else {\n            SalesforceInteractions.cashDom(\"body\").css({ \"margin-bottom\": \"2.5rem\", \"margin-top\": \"0\" });\n        }\n    }\n\n    /**\n     * @function setDismissal\n     * @param {Object} context\n     * @description Adds click listener to the \"X\" button that removes the template from the DOM.\n     */\n    function setDismissal(context) {\n        SalesforceInteractions.cashDom(`#evg-infobar-with-user-attr.${context.infobarClass} .evg-btn-dismissal`).on(\"click\", () => {\n            SalesforceInteractions.cashDom(`#evg-infobar-with-user-attr.${context.infobarClass}`).remove();\n            SalesforceInteractions.cashDom(\"body\").css({ \"margin-top\": \"0\", \"margin-bottom\": \"0\" });\n        });\n    }\n\n    function apply(context, template) {\n        if (!context.contentZone) return;\n\n        context.infobarClass = context.contentZone == \"global_infobar_top_of_page\"\n            ? \"evg-infobar-top\"\n            : \"evg-infobar-bottom\";\n\n        if (SalesforceInteractions.cashDom(`#evg-infobar-with-user-attr.${context.infobarClass}`).length > 0) return;\n\n        const { preAttrMessageText, userAttr, postAttrMessageText } = context;\n        context.messageText = `${preAttrMessageText}${userAttr}${postAttrMessageText}`;\n\n        setInfobarPosition(context);\n        const html = template(context);\n        SalesforceInteractions.cashDom(\"body\").append(html);\n        setDismissal(context);\n    }\n\n    function reset(context, template) {\n        SalesforceInteractions.cashDom(`#evg-infobar-with-user-attr.${context.infobarClass}`).remove();\n        SalesforceInteractions.cashDom(\"body\").css({ \"margin-top\": \"0\", \"margin-bottom\": \"0\" });\n    }\n\n    function control(context) {\n        return new Promise(resolve => { if (context.contentZone) resolve(); });\n    }\n\n    registerTemplate({\n        apply: apply,\n        reset: reset,\n        control: control\n    });\n\n})();\n"
        },
        "template.ts": {
            "content": "export class StyleField {\n    label: string;\n    className: string;\n}\n\nexport class InfobarWithUserAttrAndCTATemplate implements CampaignTemplateComponent {\n\n    @subtitle(\"Define infobar background & text styling.\")\n    @options([\n        { label: \"Light on Dark\", className: \"evg-light-on-dark\" },\n        { label: \"Dark on Light\", className: \"evg-dark-on-light\" }\n    ])\n    style: StyleField = { label: \"Light on Dark\", className: \"evg-light-on-dark\" };\n\n    @title(\"Pre-Attribute Message Text\")\n    @subtitle(\"Optional text field\")\n    preAttrMessageText: string = \"Message Text, \";\n\n    @title(\"User Attribute Default\")\n    @subtitle(\"Default text to appear if attribute is blank or null on the user profile\")\n    userAttrDefault: string = \"Default\";\n\n    @title(\"Post-Attribute Message Text\")\n    @subtitle(\"Optional text field\")\n    postAttrMessageText: string = \", Additional Message Text\";\n\n    @title(\"CTA Text\")\n    @subtitle(\"Optional text field\")\n    ctaText: string = \"Call To Action\";\n\n    @title(\"CTA Destination URL\")\n    @subtitle(\"Requires full URL string including https://\")\n    ctaUrl: string = \"https://cumulusfinserv.com/banking\";\n\n    run(context: CampaignComponentContext) {\n        const firstNameAttribute = context?.user?.attributes?.firstName as Attribute;\n        const firstName = firstNameAttribute?.value;\n        return {\n            userAttr: firstName || this.userAttrDefault\n        };\n    }\n\n}\n"
        }
    }
}