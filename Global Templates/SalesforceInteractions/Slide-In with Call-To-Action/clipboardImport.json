{
    "description": "Slide-In with Call-To-Action",
    "public": false,
    "files": {
        "template.hbs": {
            "content": "{{!--\n    Global Template: Slide-In with Call-to-Action\n\n    This global template creates a message that slides in from the bottom-right corner of the screen, and contains a\n    call-to-action button.\n\n    There are three different triggers for the slide-in: time on page, scroll depth, and inactivity.\n\n    There are two default Styles: dark text for lighter backgrounds or light text on darker backgrounds.\n\n    Requirements:\n    1) Set the content zone(s) to that defined in your Sitemap.\n\n    Customizations:\n    1) As a best practice, set the content zone to \"global_slide_in\".\n    See https://developer.salesforce.com/docs/marketing/personalization/guide/content-zones for recommended names for content zones\n    mapped via the Sitemap.\n    2) Style options can be changed in Serverside Code.\n    3) Styling of the Style options can be changed in CSS.\n    4) To support rich text, add the @richText(true) decorator to configuration properties in Serverside Code.\n    Handlebars expressions for these properties must be wrapped in three sets of curly braces (e.g. {{{expression}}} ).\n    5) Remove or change the default values for the configuration properties in Serverside Code.\n    6) Change the value of the aria-label attributes as necessary.\n--}}\n\n<div class=\"{{style.className}}\" id=\"evg-slide-in-with-cta\" data-evg-campaign-id=\"{{campaign}}\"\ndata-evg-experience-id=\"{{experience}}\" data-evg-user-group=\"{{userGroup}}\" role=\"dialog\" aria-hidden=\"false\"\naria-label=\"Slide-In Message{{#if header}} {{header}}{{/if}}{{#if subheader}} {{subheader}}{{/if}}\">\n    <div class=\"evg-slide-in\">\n        {{#if header}}\n        <h1 class=\"evg-header {{style.className}}\">\n            {{~header~}}\n        </h1>\n        {{/if}}\n        {{#if subheader}}\n        <h2 class=\"evg-subheader {{style.className}}\">\n            {{~subheader~}}\n        </h2>\n        {{/if}}\n        {{#if ctaText}}\n        <a class=\"evg-cta evg-btn evg-btn-primary evg-btn-lg {{style.className}}\"\n            href=\"{{ctaUrl}}\" aria-label=\"{{ctaText}}\" tabindex=\"0\">\n            {{~ctaText~}}\n        </a>\n        {{/if}}\n        <button class=\"evg-btn-dismissal {{style.className}}\" data-evg-dismissal aria-label=\"Close Slide-In\">&times;</button>\n    </div>\n</div>\n"
        },
        "template.css": {
            "content": "/* ==========================================================================\n   Slide-In\n========================================================================== */\n\n#evg-slide-in-with-cta {\n    position: fixed;\n    z-index: 1000000;\n    top: auto !important;\n    right: 5%;\n    bottom: 10vh !important;\n    left: auto;\n    width: 300px;\n    height: 300px;\n    border: 1px solid #000;\n    color: #fff;\n    background-color: #000;\n    font-family: inherit;\n    animation-name: slideInDesktopMessage;\n    animation-duration: 3s;\n}\n\n#evg-slide-in-with-cta .evg-slide-in {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    min-height: 1px;\n}\n\n#evg-slide-in-with-cta .evg-header,\n#evg-slide-in-with-cta .evg-subheader,\n#evg-slide-in-with-cta .evg-cta {\n    display: block;\n    max-width: 90%;\n    height: fit-content;\n    text-align: center;\n}\n\n/* ==========================================================================\n   Headers\n========================================================================== */\n\n#evg-slide-in-with-cta .evg-header,\n#evg-slide-in-with-cta .evg-subheader {\n    margin-bottom: .5rem;\n}\n\n#evg-slide-in-with-cta .evg-header {\n    font-size: 1.75rem;\n    line-height: 1.75rem;\n}\n\n#evg-slide-in-with-cta .evg-subheader {\n    font-size: 1.5rem;\n    font-weight: 300;\n    line-height: 1.5rem;\n}\n\n/* ==========================================================================\n   Call-To-Action Button\n========================================================================== */\n\n#evg-slide-in-with-cta .evg-btn {\n    vertical-align: middle;\n    margin-top: 1rem;\n    padding: .5rem 1rem;\n    border: 1px solid transparent;\n    border-radius: 3rem;\n    font-size: 1rem;\n    font-weight: 400;\n    line-height: 1.5;\n    text-align: center;\n    text-decoration: none;\n    transition:\n        color .15s ease-in-out,\n        background-color .15s ease-in-out,\n        border-color .15s ease-in-out,\n        box-shadow .15s ease-in-out;\n    cursor: pointer;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n\n#evg-slide-in-with-cta .evg-btn-primary {\n    border-color: #fff;\n    color: #000;\n    background-color: #fff;\n    transition: background-color .15s, color .15s;\n}\n\n#evg-slide-in-with-cta .evg-cta:hover {\n    text-decoration: none;\n}\n\n#evg-slide-in-with-cta .evg-btn-dismissal {\n    position: absolute;\n    top: 0;\n    right: 0;\n    padding: 0 .5rem;\n    border: 1px solid transparent;\n    color: #fff;\n    background-color: transparent;\n    font-size: 2rem;\n    font-weight: 700;\n    line-height: 1;\n    cursor: pointer;\n}\n\n/* ==========================================================================\n   Style\n========================================================================== */\n\n#evg-slide-in-with-cta.evg-dark-on-light {\n    background-color: #fff;\n}\n\n#evg-slide-in-with-cta.evg-light-on-dark {\n    background-color: #000;\n}\n\n#evg-slide-in-with-cta .evg-light-on-dark,\n#evg-slide-in-with-cta .evg-cta.evg-dark-on-light {\n    color: #fff;\n    background-color: #000;\n}\n\n#evg-slide-in-with-cta .evg-dark-on-light,\n#evg-slide-in-with-cta .evg-cta.evg-light-on-dark {\n    color: #000;\n    background-color: #fff;\n}\n\n/* ==========================================================================\n   Media Queries\n========================================================================== */\n\n@media only screen and (max-width: 767px) {\n    #evg-slide-in-with-cta {\n        animation-duration: 2s;\n    }\n\n    #evg-slide-in-with-cta .evg-header {\n        font-size: 1.25rem;\n    }\n\n    #evg-slide-in-with-cta .evg-subheader {\n        font-size: 1.1rem;\n    }\n}\n\n@media only screen and (max-width: 420px) {\n    #evg-slide-in-with-cta {\n        right: calc((100vw - 300px) / 2);\n        animation-name: slideInMobileMessage;\n        animation-duration: 1.5s;\n    }\n}\n\n/* ==========================================================================\n   Keyframes\n========================================================================== */\n\n@keyframes slideInDesktopMessage {\n    from {\n        right: -90%;\n    }\n\n    to {\n        right: 5%;\n    }\n}\n\n@keyframes slideInMobileMessage {\n    from {\n        right: -90%;\n    }\n\n    to {\n        right: calc((100vw - 300px) / 2);\n    }\n}\n"
        },
        "template.js": {
            "content": "(function() {\n\n    /**\n     * @function buildBindId\n     * @param {Object} context\n     * @description Create unique bind ID based on the campaign and experience IDs.\n     */\n    function buildBindId(context) {\n        return `${context.campaign}:${context.experience}`;\n    }\n\n    /**\n     * @function setDismissal\n     * @description Add click listener to the \"X\" button that removes the template from the DOM.\n     */\n    function setDismissal() {\n        SalesforceInteractions.cashDom(\"#evg-slide-in-with-cta .evg-btn-dismissal\").on(\"click\", () => {\n            SalesforceInteractions.cashDom(\"#evg-slide-in-with-cta\").remove();\n        });\n    }\n\n    /**\n     * @function handleTemplateContent\n     * @param {Object} context\n     * @description Build and insert Template HTML, attach dismissal listener\n     */\n    function handleTemplateContent({ context, template }) {\n        const html = template(context);\n        SalesforceInteractions.cashDom(\"body\").append(html);\n        setDismissal();\n    }\n\n    /**\n     * @function handleTriggerEvent\n     * @param {Object} context\n     * @description Create trigger event based on context\n     */\n    function handleTriggerEvent({ context, template }) {\n        if (!context.contentZone) return;\n\n        const { userGroup, triggerOptions, triggerOptionsNumber } = context || {};\n\n        switch (triggerOptions.name) {\n            case \"timeOnPage\":\n                return new Promise((resolve, reject) => {\n                    setTimeout(() => {\n                        if (userGroup !== \"Control\") {\n                            handleTemplateContent({ context, template });\n                        }\n                        resolve(true);\n                    }, triggerOptionsNumber);\n                });\n            case \"scrollDepth\":\n                return SalesforceInteractions.DisplayUtils\n                    .bind(buildBindId(context))\n                    .pageScroll(triggerOptionsNumber)\n                    .then((event) => {\n                        if (userGroup === \"Control\") return true;\n\n                        handleTemplateContent({ context, template });\n                    });\n            case \"inactivity\":\n                return SalesforceInteractions.DisplayUtils\n                    .bind(buildBindId(context))\n                    .pageInactive(triggerOptionsNumber)\n                    .then((event) => {\n                        if (userGroup === \"Control\") return true;\n\n                        handleTemplateContent({ context, template });\n                    });\n        }\n    }\n\n    function apply(context, template) {\n        if (SalesforceInteractions.cashDom(\"#evg-slide-in-with-cta\").length > 0) return;\n\n        return handleTriggerEvent({ context, template });\n    }\n\n    function reset(context, template) {\n        SalesforceInteractions.DisplayUtils.unbind(buildBindId(context));\n        SalesforceInteractions.cashDom(`[data-evg-campaign-id=\"${context.campaign}\"][data-evg-experience-id=\"${context.experience}\"]`)\n            .remove();\n    }\n\n    function control(context) {\n        return handleTriggerEvent({ context });\n    }\n\n    registerTemplate({\n        apply: apply,\n        reset: reset,\n        control: control\n    });\n\n})();\n"
        },
        "template.ts": {
            "content": "export class SlideInTriggerOptions {\n    name: string;\n    label: string;\n}\n\nexport class StyleField {\n    label: string;\n    className: string;\n}\n\nexport class SlideInWithCTATemplate implements CampaignTemplateComponent {\n\n    @options([\n        {\n            name: \"timeOnPage\",\n            label: \"Time on Page (Delay)\"\n        },\n        {\n            name: \"scrollDepth\",\n            label: \"Scroll Depth\"\n        },\n        {\n            name: \"inactivity\",\n            label: \"Inactivity\"\n        }\n    ])\n    triggerOptions: SlideInTriggerOptions = { name: \"\", label: \"Select...\" };\n\n    @shownIf(this, self => self.triggerOptions.name === \"timeOnPage\")\n    @title(\" \")\n    @subtitle(\"Second(s) on page\")\n    secondsOnPage: number = 0;\n\n    @shownIf(this, self => self.triggerOptions.name === \"scrollDepth\")\n    @title(\" \")\n    @subtitle(\"% of page the user has scrolled\")\n    percentageScrolled: number = 0;\n\n    @shownIf(this, self => self.triggerOptions.name === \"inactivity\")\n    @title(\" \")\n    @subtitle(\"Second(s) of inactivity on page\")\n    secondsInactive: number = 0;\n\n    @subtitle(\"Define slide-in background & text styling.\")\n    @options([\n        { label: \"Light on Dark\", className: \"evg-light-on-dark\" },\n        { label: \"Dark on Light\", className: \"evg-dark-on-light\" }\n    ])\n    style: StyleField = { label: \"Light on Dark\", className: \"evg-light-on-dark\" };\n\n    @subtitle(\"Optional text field\")\n    header: string = \"Header Text\";\n\n    @subtitle(\"Optional text field\")\n    subheader: string = \"Subheader Text\";\n\n    @title(\"CTA Text\")\n    @subtitle(\"Optional text field\")\n    ctaText: string = \"Call To Action\";\n\n    @title(\"CTA Destination URL\")\n    @subtitle(\"Requires full URL string including https://\")\n    ctaUrl: string = \"https://www.northerntrailoutfitters.com\";\n\n    run(context: CampaignComponentContext) {\n        switch (this.triggerOptions.name) {\n            case \"timeOnPage\":\n                return {\n                    triggerOptionsNumber: this.secondsOnPage * 1000\n                };\n            case \"scrollDepth\":\n                return {\n                    triggerOptionsNumber: (this.percentageScrolled / 100)\n                };\n            case \"inactivity\":\n                return {\n                    triggerOptionsNumber: this.secondsInactive * 1000\n                };\n            default:\n                return {};\n        }\n    }\n\n}\n"
        }
    }
}