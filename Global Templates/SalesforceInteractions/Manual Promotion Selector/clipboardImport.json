{
    "description": "Manual Promotion Selector",
    "public": false,
    "files": {
        "template.hbs": {
            "content": "{{!--\n    Global Template: Manual Promotion Selector\n\n    This global template inserts a promotion, chosen by the campaign creator.\n\n    Requirements:\n    1) Set the content zone(s) to that defined in your Sitemap.\n    2) Ensure that Promotions are enabled for the account and dataset.\n\n    Customizations:\n    1) Remove or change the default values for the configuration properties in Serverside Code. Specifically, the\n    ability to choose the specific promotion and the specific asset you would like the end user to see.\n--}}\n\n<div id=\"mcis-manual-promotion-selector\" data-evg-campaign-id=\"{{campaign}}\"\ndata-evg-experience-id=\"{{experience}}\" data-evg-user-group=\"{{userGroup}}\">\n    <a class=\"mcis-promotion-link\" href=\"{{url}}\">\n        <img class=\"mcis-promotion-img\" src=\"{{imageUrl}}\" alt=\"{{selectedPromo.label}}\">\n    </a>\n</div>\n"
        },
        "template.css": {
            "content": "#mcis-manual-promotion-selector {\n    text-align: center;\n}\n\n#mcis-manual-promotion-selector .mcis-promotion-link,\n#mcis-manual-promotion-selector .mcis-promotion-img {\n    max-width: 100%;\n}\n\n#mcis-manual-promotion-selector .mcis-promotion-img {\n    object-fit: contain;\n}\n"
        },
        "template.js": {
            "content": "(function() {\n\n    /**\n     * @function buildBindId\n     * @param {Object} context\n     * @description Create unique bind ID based on the campaign and experience IDs.\n     */\n    function buildBindId(context) {\n        return `${context.campaign}:${context.experience}`;\n    }\n\n    function apply(context, template) {\n        if (!context.contentZone || !context.imageUrl || !context.url) return;\n\n        let contentZoneSelector = SalesforceInteractions.mcis.getContentZoneSelector(context.contentZone);\n        if (!contentZoneSelector && context.selectedAsset) {\n            contentZoneSelector = SalesforceInteractions.mcis.getContentZoneSelector(context.selectedAsset);\n        }\n        /**\n         * The pageElementLoaded method waits for the content zone to load into the DOM\n         * before rendering the template. The observer element that monitors for the content\n         * zone element to get inserted into its DOM node is set to \"body\" by default.\n         * For performance optimization, this default can be overridden by adding\n         * a second selector argument, which will be used as the observer element instead.\n         *\n         * Visit the Template Display Utilities documentation to learn more:\n         * https://developer.salesforce.com/docs/marketing/personalization/guide/web-template-display-utilities\n         */\n        return SalesforceInteractions.DisplayUtils\n            .bind(buildBindId(context))\n            .pageElementLoaded(contentZoneSelector)\n            .then((element) => {\n                const html = template(context);\n                SalesforceInteractions.cashDom(element).html(html);\n            });\n    }\n\n    function reset(context, template) {\n        SalesforceInteractions.DisplayUtils.unbind(buildBindId(context));\n        SalesforceInteractions.cashDom(`[data-evg-campaign-id=\"${context.campaign}\"][data-evg-experience-id=\"${context.experience}\"]`)\n            .remove();\n    }\n\n    function control(context) {\n        const contentZoneSelector = SalesforceInteractions.mcis.getContentZoneSelector(context.contentZone);\n        return SalesforceInteractions.DisplayUtils\n            .bind(buildBindId(context))\n            .pageElementLoaded(contentZoneSelector)\n            .then((element) => {\n                SalesforceInteractions.cashDom(element).attr({\n                    \"data-evg-campaign-id\": context.campaign,\n                    \"data-evg-experience-id\": context.experience,\n                    \"data-evg-user-group\": context.userGroup\n                });\n            });\n    }\n\n    registerTemplate({\n        apply: apply,\n        reset: reset,\n        control: control\n    });\n\n})();\n"
        },
        "template.ts": {
            "content": "import { ItemReference } from \"common\";\n\nfunction isCdnOrExternalImage(asset?: Asset) {\n    return asset?.type === \"CdnImage\" || asset?.type === \"ExternalImage\";\n}\n\nexport class PromotionSearchOptions implements Search<string> {\n\n    search(context: GearLifecycleContext, searchString: string): ItemReference[] {\n        if (!searchString) return [];\n\n        const promos: Promotion[] = context.services.catalog.findByName(\"Promotion\", searchString) as Promotion[];\n        return promos.reduce((allPromos, promo: Promotion) => {\n            const promoItem = {\n                itemType: \"Promotion\",\n                id: promo.id,\n                label: promo.attributes[\"name\"] != null ? promo.attributes[\"name\"].value : promo.id,\n            } as ItemReference;\n            allPromos.push(promoItem);\n            return allPromos;\n        }, []);\n    }\n}\n\nexport class AssetLookupOptions implements Lookup<string> {\n\n    selectedPromo: ItemReference\n\n    constructor(selectedPromo: ItemReference) {\n        this.selectedPromo = selectedPromo;\n    }\n\n    lookup(context: GearLifecycleContext): string[] {\n        if (!this.selectedPromo) return [];\n\n        const fullPromo: Promotion = context.services.catalog.findItem(\"Promotion\", this.selectedPromo.id) as Promotion;\n        if (!fullPromo || !fullPromo.assets) return [];\n\n        return fullPromo.assets.reduce((contentZones: string[], asset: Asset) => {\n            if (isCdnOrExternalImage(asset) && asset?.contentZones) {\n                asset.contentZones.forEach(zone => { if (!(zone in contentZones)) contentZones.push(zone) });\n            }\n            return contentZones;\n        }, []);\n    }\n}\n\nexport class ManualPromotionSelectorTemplate implements CampaignTemplateComponent {\n\n    @searchOptions(() => new PromotionSearchOptions())\n    @title(\"Promotion Selector\")\n    @subtitle(\"Select the promotion that you want to display in the targeted web content zone.\")\n    selectedPromo: ItemReference;\n\n    @title(\"Asset Selector\")\n    @lookupOptions((self) => new AssetLookupOptions(self.selectedPromo))\n    @subtitle(`Select a Content Zone or Tag to determine which asset from your selected promotion is rendered in the\n              targeted web content zone.`)\n    selectedAsset: string;\n\n    run(context: CampaignComponentContext) {\n        const promotion: Promotion = context.services.catalog.findItem(\"Promotion\", this.selectedPromo.id) as Promotion;\n        const fetchImageUrl = (promotion: Promotion, contentZone: string): string => {\n            if (!promotion || !promotion.assets) return \"\";\n\n            for (const asset of promotion.assets) {\n                if (!isCdnOrExternalImage(asset)) continue;\n                if (asset.contentZones?.includes(this.selectedAsset)) {\n                    return (asset as ImageAsset).imageUrl;\n                }\n            }\n            for (const asset of promotion.assets) {\n                if (!isCdnOrExternalImage(asset)) continue;\n                if (asset.contentZones?.includes(contentZone)) {\n                    return (asset as ImageAsset).imageUrl;\n                }\n            }\n            return \"\";\n        };\n        const imageUrl: string = fetchImageUrl(promotion, context.contentZone);\n        const url: string = promotion?.attributes?.url?.value ? promotion.attributes.url.value as string : \"\";\n\n        return { imageUrl, url };\n    }\n\n}\n"
        }
    }
}