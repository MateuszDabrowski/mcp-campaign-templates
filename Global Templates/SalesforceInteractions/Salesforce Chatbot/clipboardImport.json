{
    "description": "Salesforce Chatbot",
    "public": false,
    "files": {
        "template.hbs": {
            "content": "{{!--\n    Global Template: Salesforce Chatbot\n\n    This global template interacts with the Salesforce Chatbot that is embedded on your website.\n\n    There are two different triggers for the chatbot: time on page and inactivity.\n\n    Requirements:\n    1) The chatbot needs to be embedded on your website.\n    See https://developer.salesforce.com/docs/atlas.en-us.bot_cookbook.meta/bot_cookbook/bot_cookbook_first_bot.htm\n    2) At least one available content zone.\n\n    Customizations:\n    1) As a best practice, set the content zone to \"global_chatbot\".\n    See https://developer.salesforce.com/docs/marketing/personalization/guide/content-zones for recommended names for content zones\n    mapped via the Sitemap.\n    2) This template is set up with two configurable Trigger Options for the chatbot in the Serverside Code.\n    3) While this template only tracks impressions, it is worth considering adding tracking for clickthrough and dismissal\n    stats. Should you decided to add additional tracking, the following docs will be helpful to reference:\n    - https://developer.salesforce.com/docs/marketing/personalization/guide/sitemap-implementation.html#utility-functions\n    - https://developer.salesforce.com/docs/marketing/personalization/guide/web-template-display-utilities\n    - https://developer.salesforce.com/docs/marketing/personalization/guide/campaign-stats-tracking.html?q=campaign+stats#sending-campaign-stats-without-the-campaign-stats-gear\n--}}"
        },
        "template.css": {
            "content": "/* Left intentionally blank. CSS is not needed for this template. */\n"
        },
        "template.js": {
            "content": "(function () {\n\n    const BIND_IDS = {\n        Base: null,\n        ChatBot: null\n    };\n\n    const mainFormContainerSelector = \".embeddedServiceSidebar .showDockableContainer .formContent\";\n\n    /**\n     * @function buildBindId\n     * @param {Object} context\n     * @description Create unique bind ID based on the campaign and experience IDs.\n     */\n    function buildBindId(context) {\n        return `${context.campaign}:${context.experience}`;\n    }\n\n    /**\n     * @function buildChatBotBindIds\n     * @param {Object} context\n     * @description Build unique bind IDs and assign them to BIND_IDS for use in different util calls\n     */\n    function buildChatBotBindIds(context) {\n        const baseId = buildBindId(context);\n        Object.assign(BIND_IDS, {\n            Base: baseId,\n            ChatBot: `${baseId}:chatbot`\n        });\n    }\n\n    /**\n     * @function openChatbot\n     * @description Call the function 'embedded_svc.inviteAPI.inviteButton.acceptInvite();' to activate\n     * the chatbot session\n     */\n    function openChatBot() {\n        try {\n            embedded_svc.inviteAPI.inviteButton.acceptInvite();\n        } catch (e) {\n            SalesforceInteractions.sendException(e, `Error caught in 'handleChatBotWhenTrue' from Salesforce Chatbot Template`);\n        }\n    }\n\n    /**\n     * @function sendStatOfType\n     * @param {Object} obj\n     * @param {Object} obj.context\n     * @param {string} obj.statType\n     * @description Abstract wrapper for `SalesforceInteractions.mcis.sendStat`\n     */\n    function sendStatOfType({ context, statType }) {\n        SalesforceInteractions.mcis.sendStat({\n            campaignStats: [{\n                control: context.userGroup === \"Control\",\n                experienceId: context.experience,\n                stat: statType\n            }]\n        });\n    }\n\n    /**\n     * @function initStatTracking\n     * @param {Object} context\n     * @description Initialize stat tracking based on presence of main chatbot element\n     */\n    function initStatTracking(context) {\n        return SalesforceInteractions.DisplayUtils\n            .bind(BIND_IDS.ChatBot)\n            .pageElementLoaded(mainFormContainerSelector)\n            .then((element) => {\n                sendStatOfType({ context, statType: \"Impression\" });\n                return element;\n            });\n    }\n\n    /**\n     * @function handleTriggerEvent\n     * @param {Object} context\n     * @description Create trigger event based on context\n     */\n    function handleTriggerEvent(context) {\n        if (!context.contentZone) return;\n\n        const { triggerOptions, triggerOptionsNumber } = context || {};\n\n        switch (triggerOptions.name) {\n            case \"timeOnPage\":\n                return new Promise((resolve) => {\n                    setTimeout(() => {\n                        resolve(true);\n                    }, triggerOptionsNumber);\n                })\n                .then(() => {\n                    if (context.userGroup !== \"Control\") {\n                        openChatBot();\n                    }\n                    return initStatTracking(context);\n                });\n            case \"scrollDepth\":\n                return SalesforceInteractions.DisplayUtils\n                    .bind(BIND_IDS.Base)\n                    .pageScroll(triggerOptionsNumber)\n                    .then(() => {\n                        if (context.userGroup !== \"Control\") {\n                            openChatBot();\n                        }\n                        return initStatTracking(context);\n                    });\n            case \"inactivity\":\n                return SalesforceInteractions.DisplayUtils\n                    .bind(BIND_IDS.Base)\n                    .pageInactive(triggerOptionsNumber)\n                    .then(() => {\n                        if (context.userGroup !== \"Control\") {\n                            openChatBot();\n                        }\n                        return initStatTracking(context);\n                    });\n        }\n    }\n\n    /**\n     * @function handleChatBotWhenTrue\n     * @param {Object} context\n     * @description Open chatbot when ready, then initialize trigger event setup\n     */\n    function handleChatBotWhenTrue(context) {\n        const predicate = () => typeof (((window.embedded_svc || {}).inviteAPI || {}).inviteButton || {}).acceptInvite === \"function\";\n\n        return SalesforceInteractions.util.resolveWhenTrue\n            .bind(predicate, BIND_IDS.Base, (1000 * 60 * 5), 500)\n            .then(() => {\n                return handleTriggerEvent(context);\n            });\n    }\n\n    function apply(context) {\n        buildChatBotBindIds(context);\n        return handleChatBotWhenTrue(context);\n    }\n\n    function reset(context) {\n        buildChatBotBindIds(context);\n        SalesforceInteractions.DisplayUtils.unbind(BIND_IDS.Base);\n        SalesforceInteractions.DisplayUtils.unbind(BIND_IDS.ChatBot);\n        SalesforceInteractions.cashDom(mainFormContainerSelector).remove();\n    }\n\n    function control(context) {\n        buildChatBotBindIds(context);\n        return handleChatBotWhenTrue(context);\n    }\n\n    registerTemplate({\n        apply: apply,\n        reset: reset,\n        control: control\n    });\n\n})();\n"
        },
        "template.ts": {
            "content": "export class ChatbotTriggerOptions {\n    name: string;\n    label: string;\n}\n\nexport class SalesforceChatbotTemplate implements CampaignTemplateComponent {\n\n    @options([\n        {\n            name: \"timeOnPage\",\n            label: \"Time on Page (Delay)\"\n        },\n        {\n            name: \"scrollDepth\",\n            label: \"Scroll Depth\"\n        },\n        {\n            name: \"inactivity\",\n            label: \"Inactivity\"\n        }\n    ])\n    triggerOptions: ChatbotTriggerOptions = { name: \"\", label: \"Select...\" };\n\n    @shownIf(this, self => self.triggerOptions.name === \"timeOnPage\")\n    @title(\" \")\n    @subtitle(\"Second(s) on page\")\n    secondsOnPage: number = 0;\n\n    @shownIf(this, self => self.triggerOptions.name === \"scrollDepth\")\n    @title(\" \")\n    @subtitle(\"% of page the user has scrolled\")\n    percentageScrolled: number = 0;\n\n    @shownIf(this, self => self.triggerOptions.name === \"inactivity\")\n    @title(\" \")\n    @subtitle(\"Second(s) of inactivity on page\")\n    secondsInactive: number = 0;\n\n\n    run(context: CampaignComponentContext) {\n        switch (this.triggerOptions.name) {\n            case \"timeOnPage\":\n                return {\n                    triggerOptionsNumber: this.secondsOnPage * 1000\n                };\n            case \"scrollDepth\":\n                return {\n                    triggerOptionsNumber: (this.percentageScrolled / 100)\n                };\n            case \"inactivity\":\n                return {\n                    triggerOptionsNumber: this.secondsInactive * 1000\n                };\n            default:\n                return {};\n        }\n    }\n\n}\n"
        }
    }
}