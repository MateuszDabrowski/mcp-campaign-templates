{
    "description": "Einstein Decisions",
    "public": false,
    "files": {
        "template.hbs": {
            "content": "{{!--\n    Global Template: Einstein Decisions\n\n    This global template inserts a promotion, chosen by Einstein Decisions.\n\n    Requirements:\n    1) Einstein Decisions is an Interaction Studio Premium Edition feature and is not available to\n    growth edition customers.\n    2) Set the content zone(s) to that defined in your Sitemap.\n    3) Ensure that you have Feature Engineering set up via the Einstein Decisions tab available in the left-hand\n    navigation of the platform. If you encounter issues, please contact your account administrator.\n    4) Enable Promotions in the dataset's Catalog Setup.\n    5) Create and configure Promotions, either manually or through an ETL.\n\n    Customizations:\n    1) Remove or change the default value for maxResults in Serverside Code.\n--}}\n\n<div id=\"mcis-einstein-decisions\" data-evg-campaign-id=\"{{campaign}}\"\ndata-evg-experience-id=\"{{experience}}\" data-evg-user-group=\"{{userGroup}}\">\n    <a class=\"mcis-promotion-link\" href=\"{{url}}\" data-evg-item-id=\"{{id}}\" data-evg-item-type=\"Promotion\">\n        <img class=\"mcis-promotion-img\" src=\"{{imageUrl}}\">\n    </a>\n</div>\n"
        },
        "template.css": {
            "content": "#mcis-einstein-decisions {\n    text-align: center;\n}\n\n#mcis-einstein-decisions .mcis-promotion-link,\n#mcis-einstein-decisions .mcis-promotion-img {\n    max-width: 100%;\n}\n\n#mcis-einstein-decisions .mcis-promotion-img {\n    object-fit: contain;\n}\n"
        },
        "template.js": {
            "content": "(function() {\n\n    /**\n     * @function buildBindId\n     * @param {Object} context\n     * @description Create unique bind ID based on the campaign and experience IDs.\n     */\n    function buildBindId(context) {\n        return `${context.campaign}:${context.experience}`;\n    }\n\n    function apply(context, template) {\n        if (!context.contentZone || !context.imageUrl || !context.url) return;\n\n        const contentZoneSelector = SalesforceInteractions.mcis.getContentZoneSelector(context.contentZone);\n\n        /**\n         * The pageElementLoaded method waits for the content zone to load into the DOM\n         * before rendering the template. The observer element that monitors for the content\n         * zone element to get inserted into its DOM node is set to \"body\" by default.\n         * For performance optimization, this default can be overridden by adding\n         * a second selector argument, which will be used as the observer element instead.\n         *\n         * Visit the Template Display Utilities documentation to learn more:\n         * https://developer.salesforce.com/docs/marketing/personalization/guide/web-template-display-utilities\n         */\n        return SalesforceInteractions.DisplayUtils\n            .bind(buildBindId(context))\n            .pageElementLoaded(contentZoneSelector)\n            .then((element) => {\n                const html = template(context);\n                SalesforceInteractions.cashDom(element).html(html);\n            });\n    }\n\n    function reset(context, template) {\n        SalesforceInteractions.DisplayUtils.unbind(buildBindId(context));\n        SalesforceInteractions.cashDom(`[data-evg-campaign-id=\"${context.campaign}\"][data-evg-experience-id=\"${context.experience}\"]`)\n            .remove();\n    }\n\n    function control(context) {\n        const contentZoneSelector = SalesforceInteractions.mcis.getContentZoneSelector(context.contentZone);\n        return SalesforceInteractions.DisplayUtils\n            .bind(buildBindId(context))\n            .pageElementLoaded(contentZoneSelector)\n            .then((element) => {\n                SalesforceInteractions.cashDom(element).attr({\n                    \"data-evg-campaign-id\": context.campaign,\n                    \"data-evg-experience-id\": context.experience,\n                    \"data-evg-user-group\": context.userGroup\n                });\n            });\n    }\n\n    registerTemplate({\n        apply: apply,\n        reset: reset,\n        control: control\n    });\n\n})();\n"
        },
        "template.ts": {
            "content": "import { ContextualBanditConfig, decide } from \"corvus\";\nimport { ItemReference } from \"common\";\n\nfunction isCdnOrExternalImage(asset?: Asset) {\n    return asset?.type === \"CdnImage\" || asset?.type === \"ExternalImage\";\n}\n\nexport class PromotionSearchOptions implements Search<string> {\n\n    search(context: GearLifecycleContext, searchString: string): ItemReference[] {\n        if (!searchString) return [];\n\n        const promos: Promotion[] = context.services.catalog.findByName(\"Promotion\", searchString) as Promotion[];\n        return promos.reduce((allPromos: ItemReference[], promo: Promotion) => {\n            const promoItem = {\n                itemType: \"Promotion\",\n                id: promo.id,\n                label: promo.attributes[\"name\"] != null ? promo.attributes[\"name\"].value : promo.id,\n            } as ItemReference;\n            allPromos.push(promoItem);\n            return allPromos;\n        }, []);\n    }\n}\n\nexport class AssetLookupOptions implements Lookup<string> {\n\n    fallbackArm: ItemReference\n\n    constructor(fallbackArm: ItemReference) {\n        this.fallbackArm = fallbackArm;\n    }\n\n    lookup(context: GearLifecycleContext): string[] {\n        if (!this.fallbackArm) return [];\n\n        const fullPromo: Promotion = context.services.catalog.findItem(\"Promotion\", this.fallbackArm.id) as Promotion;\n        if (!fullPromo || !fullPromo.assets) return [];\n\n        return fullPromo.assets.reduce((contentZones: string[], asset: Asset) => {\n            if (isCdnOrExternalImage(asset) && asset?.contentZones) {\n                asset.contentZones.forEach(zone => { if (!(zone in contentZones)) contentZones.push(zone) });\n            }\n            return contentZones;\n        }, []);\n    }\n}\n\nexport class EinsteinDecisionsTemplate implements CampaignTemplateComponent {\n\n    @header(' ')\n    @headerSubtitle('Only promotion assets tagged with the targeted web content zone will be eligible to return in the campaign.')\n\n    @hidden(true)\n    forHeaderSubtitle;\n\n    @searchOptions((self) => new PromotionSearchOptions())\n    @title(\"Optional Fallback Promotion Selector\")\n    @subtitle(`Search for a fallback promotion to display if there are no eligible promotions to show to the end user.\n              If no fallback is selected, the default site experience would display. (NOTE: This field is case-sensitive.)`)\n    fallbackArm: ItemReference;\n\n    @title(\"Fallback Asset Selector\")\n    @lookupOptions((self) => new AssetLookupOptions(self.fallbackArm))\n    @hidden(this, (self) => !self.fallbackArm)\n    @subtitle(`Select a Content Zone or Tag to determine which asset on your selected fallback promotion is rendered in\n              the targeted web content zone.`)\n    fallbackAsset: string;\n\n    run(context: CampaignComponentContext) {\n        const banditConfig: ContextualBanditConfig = {\n            maxResults: 1,\n            contentZone: context.contentZone,\n            fallbackArms: this.fallbackArm ? [this.fallbackArm.id] : []\n        } as ContextualBanditConfig;\n\n        const promotion: Promotion = decide(context, banditConfig, null)[0] as Promotion;\n\n        const fetchImageUrl = (promotion: Promotion, contentZone: string): string => {\n            if (!promotion || !promotion.assets) return \"\";\n\n            for (const asset of promotion.assets) {\n                if (!isCdnOrExternalImage(asset)) continue;\n                if (asset.contentZones?.includes(contentZone)) {\n                    return (asset as ImageAsset).imageUrl;\n                }\n            }\n            if (this.fallbackAsset && this.fallbackArm?.id === promotion.id) {\n                for (const asset of promotion.assets) {\n                    if (!isCdnOrExternalImage(asset)) continue;\n                    if (asset.contentZones?.includes(this.fallbackAsset)) {\n                        return (asset as ImageAsset).imageUrl;\n                    }\n                }\n            }\n            return \"\";\n        };\n\n        const imageUrl: string = fetchImageUrl(promotion, context.contentZone);\n        const url: string = promotion?.attributes?.url?.value ? promotion.attributes.url.value as string : \"\";\n        const id: string = promotion.id;\n\n        return { imageUrl, url, id };\n    }\n\n}\n"
        }
    }
}